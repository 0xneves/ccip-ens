// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {IRouterClient} from "@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol";
import {OwnerIsCreator} from "@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol";
import {Client} from "@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol";
import {CCIPReceiver} from "@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol";
import {IERC20} from "@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol";
import {SafeERC20} from "@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol";

/// @title - Commit and Register ENS names on L1 via L2 using CCIP.
contract CCIPL2 is CCIPReceiver, OwnerIsCreator {
  using SafeERC20 for IERC20;

  // Custom errors to provide more descriptive revert messages.
  error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees); // Used to make sure contract has enough balance to cover the fees.
  error NothingToWithdraw(); // Used when trying to withdraw Ether but there's nothing to withdraw.
  error FailedToWithdrawEth(address owner, address target, uint256 value); // Used when the withdrawal of Ether fails.
  error DestinationChainNotAllowlisted(uint64 destinationChainSelector); // Used when the destination chain has not been allowlisted by the contract owner.
  error InvalidReceiverAddress(); // Used when the receiver address is 0.

  // Event emitted when a message is sent to another chain.
  event MessageSent(
    bytes32 indexed messageId, // The unique ID of the CCIP message.
    uint64 indexed destinationChainSelector, // The chain selector of the destination chain.
    address receiver, // The address of the receiver on the destination chain.
    address sender,
    address feeToken, // the token address used to pay CCIP fees.
    uint256 fees // The fees paid for sending the message.
  );

  // Enum for ENS functions that will be called on L1
  enum ENSFunctions {
    COMMIT,
    REGISTER
  }

  // Mapping to keep track of allowlisted destination chains.
  mapping(uint64 => bool) public allowlistedDestinationChains;

  // The Sepolia Chain Selector
  // NOTE: We are using testnets for the hackathon
  uint64 public sepoliaDestinationChainSelector;

  // The receiver contract on L1 Sepolia
  address public sepoliaContractAddress;

  // Chainlink token ($LINK)
  IERC20 private s_linkToken;

  /// @notice Constructor initializes the contract with the router address.
  /// @param _router The address of the router contract.
  /// @param _link The address of the link contract.
  /// @param _destChain The destination chain selector.
  /// @param _destContract The destination contract for the L2 calls.
  constructor(
    address _router,
    address _link,
    uint64 _destChain,
    address _destContract
  ) CCIPReceiver(_router) {
    s_linkToken = IERC20(_link);
    sepoliaDestinationChainSelector = _destChain;
    sepoliaContractAddress = _destContract;
  }

  /// @notice Expects the destination chain on L1 to be Sepolia or ETH
  /// @param _destChain The destination chain selector.
  function setSepoliaDestinationChain(uint64 _destChain) external onlyOwner {
    sepoliaDestinationChainSelector = _destChain;
  }

  /// @notice Expects the destination contract address on L1 to be on Sepolia or ETH
  /// @param _destContract The destination contract address on L1
  function setSepoliaContractAddress(address _destContract) external onlyOwner {
    sepoliaContractAddress = _destContract;
  }

  /// @notice Creates a commitment for a name registration and sends via CCIP.
  /// @param _commitment The commited hash generated by ENS `makeCommitment`.
  function commit(bytes32 _commitment) external {
    bytes memory data = abi.encode(_commitment);
    bytes memory dataWithSelector = abi.encode(
      uint256(ENSFunctions.COMMIT),
      msg.sender,
      0,
      data
    );
    sendMessagePayLINK(dataWithSelector);
  }

  /**
   * @notice Registers a name with the ENS and sends via CCIP.
   * @param _name The name to register (e.g., "example").
   * @param _owner The address of the new owner of the name.
   * @param _duration The registration duration in seconds.
   * @param _secret The secret used for the commitment to ensure integrity.
   * @param _resolver The address of the resolver contract (can be set to `address(0)` for default).
   * @param _data Additional resolver setup data (e.g., setting records).
   * @param _fuses Optional parameter to set the name's fuses (e.g., to configure name restrictions).
   * @dev This function requires payment for the registration fee via `msg.value`.
   * NOTE: ReverseRecords are not supported because only msg.sender can claim and set for themselves.
   * In this case the msg.sender is the CCIP contract which should not claim reverse names.
   */
  function register(
    string calldata _name,
    address _owner,
    uint256 _duration,
    bytes32 _secret,
    address _resolver,
    bytes[] calldata _data,
    uint16 _fuses
  ) external payable {
    if (
      _owner == address(0) ||
      _owner == address(this) ||
      _owner == sepoliaContractAddress
    ) {
      revert InvalidReceiverAddress();
    }
    // For an acurate price, we could: get the price via chainlink funcitons or use the same price oracle in mainnet.
    // But to handle possible reverts and failures, the only way would be by catching the register and sending a new
    // message from L1 to L2 to unlock the user's funds. What is implemented in this example: In case the CCIP fails
    // when registering the name, the same ETH amount with a 10% fee is release to the user address on L1.
    if (msg.value < 0.004 ether)
      revert NotEnoughBalance(msg.value, 0.004 ether);

    // Encode the register data to be sent to the L1 contract
    bytes memory data = abi.encode(
      _name,
      _owner,
      _duration,
      _secret,
      _resolver,
      _data,
      false,
      _fuses
    );

    // Encode the function parameters and selector with the value and sender
    bytes memory dataWithSelector = abi.encode(
      uint256(ENSFunctions.REGISTER),
      msg.sender,
      msg.value,
      data
    );

    // Send the message via CCIP paying with LINK
    sendMessagePayLINK(dataWithSelector);
  }

  /// @notice Sends data and transfer tokens to receiver on the destination chain.
  /// @notice Pay for fees in LINK.
  /// @dev Assumes your contract has sufficient LINK to pay for CCIP fees.
  /// @param _data The string data to be sent.
  /// @return messageId The ID of the CCIP message that was sent.
  function sendMessagePayLINK(
    bytes memory _data
  ) internal returns (bytes32 messageId) {
    if (sepoliaContractAddress == address(0)) revert InvalidReceiverAddress();
    if (sepoliaDestinationChainSelector == 0)
      revert DestinationChainNotAllowlisted(sepoliaDestinationChainSelector);

    // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message
    // address(linkToken) means fees are paid in LINK
    Client.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(
      sepoliaContractAddress,
      _data,
      address(s_linkToken)
    );

    // Initialize a router client instance to interact with cross-chain router
    IRouterClient router = IRouterClient(this.getRouter());
    // Get the fee required to send the CCIP message
    uint256 fees = router.getFee(
      sepoliaDestinationChainSelector,
      evm2AnyMessage
    );

    // Check if sender has enough tokens
    uint256 linkBalance = s_linkToken.balanceOf(msg.sender);
    if (fees > linkBalance) revert NotEnoughBalance(linkBalance, fees);
    // Then transfer the tokens to this contract
    s_linkToken.transferFrom(msg.sender, address(this), fees);
    // approve the Router to transfer LINK tokens on contract's behalf. It will spend the fees in LINK
    s_linkToken.approve(address(router), fees);

    // Send the message through the router and store the returned message ID
    messageId = router.ccipSend(
      sepoliaDestinationChainSelector,
      evm2AnyMessage
    );

    // Emit an event with message details
    emit MessageSent(
      messageId,
      sepoliaDestinationChainSelector,
      sepoliaContractAddress,
      msg.sender,
      address(s_linkToken),
      fees
    );

    // Return the message ID
    return messageId;
  }

  function _ccipReceive(
    Client.Any2EVMMessage memory any2EvmMessage
  ) internal override {
    // L2 is not supposed to receive messages
    // But we have to declare this function because of the interface
  }

  /// @notice Construct a CCIP message.
  /// @dev This function will create an EVM2AnyMessage struct with all the necessary information for programmable tokens transfer.
  /// @param _receiver The address of the receiver.
  /// @param _data The string data to be sent.
  /// @param _feeTokenAddress The address of the token used for fees. Set address(0) for native gas.
  /// @return Client.EVM2AnyMessage Returns an EVM2AnyMessage struct which contains information for sending a CCIP message.
  function _buildCCIPMessage(
    address _receiver,
    bytes memory _data,
    address _feeTokenAddress
  ) private pure returns (Client.EVM2AnyMessage memory) {
    // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message
    Client.EVM2AnyMessage memory evm2AnyMessage = Client.EVM2AnyMessage({
      receiver: abi.encode(_receiver), // ABI-encoded receiver address
      data: _data, // ABI-encoded string
      tokenAmounts: new Client.EVMTokenAmount[](0), // The amount and type of token being transferred
      extraArgs: Client._argsToBytes(
        // Additional arguments, setting gas limit and allowing out-of-order execution.
        // Best Practice: For simplicity, the values are hardcoded. It is advisable to use a more dynamic approach
        // where you set the extra arguments off-chain. This allows adaptation depending on the lanes, messages,
        // and ensures compatibility with future CCIP upgrades. Read more about it here: https://docs.chain.link/ccip/best-practices#using-extraargs
        Client.EVMExtraArgsV2({
          gasLimit: 400_000, // Gas limit for the callback on the destination chain
          allowOutOfOrderExecution: true // Allows the message to be executed out of order relative to other messages from the same sender
        })
      ),
      // Set the feeToken to a feeTokenAddress, indicating specific asset will be used for fees
      feeToken: _feeTokenAddress
    });
    return evm2AnyMessage;
  }

  /// @notice Fallback function to allow the contract to receive Ether.
  /// @dev This function has no function body, making it a default function for receiving Ether.
  /// It is automatically called when Ether is sent to the contract without any data.
  receive() external payable {}

  /// @notice Allows the contract owner to withdraw the entire balance of Ether from the contract.
  /// @dev This function reverts if there are no funds to withdraw or if the transfer fails.
  /// It should only be callable by the owner of the contract.
  /// @param _beneficiary The address to which the Ether should be sent.
  function withdraw(address _beneficiary) public onlyOwner {
    // Retrieve the balance of this contract
    uint256 amount = address(this).balance;

    // Revert if there is nothing to withdraw
    if (amount == 0) revert NothingToWithdraw();

    // Attempt to send the funds, capturing the success status and discarding any return data
    (bool sent, ) = _beneficiary.call{value: amount}("");

    // Revert if the send failed, with information about the attempted transfer
    if (!sent) revert FailedToWithdrawEth(msg.sender, _beneficiary, amount);
  }

  /// @notice Allows the owner of the contract to withdraw all tokens of a specific ERC20 token.
  /// @dev This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.
  /// @param _beneficiary The address to which the tokens will be sent.
  /// @param _token The contract address of the ERC20 token to be withdrawn.
  function withdrawToken(
    address _beneficiary,
    address _token
  ) public onlyOwner {
    // Retrieve the balance of this contract
    uint256 amount = IERC20(_token).balanceOf(address(this));

    // Revert if there is nothing to withdraw
    if (amount == 0) revert NothingToWithdraw();

    IERC20(_token).safeTransfer(_beneficiary, amount);
  }
}
